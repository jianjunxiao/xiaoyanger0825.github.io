<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小样儿</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>喜欢NBA、目前从事Android开发</description>
    <pubDate>Thu, 21 Dec 2017 07:58:38 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>使用Charles抓取app数据包</title>
      <link>http://yoursite.com/2017/12/20/%E4%BD%BF%E7%94%A8Charles%E6%8A%93%E5%8F%96app%E6%95%B0%E6%8D%AE%E5%8C%85/</link>
      <guid>http://yoursite.com/2017/12/20/%E4%BD%BF%E7%94%A8Charles%E6%8A%93%E5%8F%96app%E6%95%B0%E6%8D%AE%E5%8C%85/</guid>
      <pubDate>Wed, 20 Dec 2017 09:56:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Charles是一款非常实用的抓包工具。它通过电脑端代理，拦截网络请求和响应来实现数据包的抓取。支持http/https。&lt;/p&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;C
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Charles是一款非常实用的抓包工具。它通过电脑端代理，拦截网络请求和响应来实现数据包的抓取。支持http/https。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Charles需要Java环境，在安装之前确保已有配置Java运行环境。然后到<a href="https://www.charlesproxy.com" target="_blank" rel="noopener">官网</a>下载Charles并安装。破解的话，可以使用网友提供的工具： <a href="https://www.zzzmode.com/mytools/charles/" target="_blank" rel="noopener">Charles 在线破解</a>。</p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>打开Charles抓包工具：<br><img src="https://i.imgur.com/6s0i6lQ.png" alt="Charles"><br>电脑端设置代理：Proxy —&gt; Proxy Setting：<br><img src="https://i.imgur.com/pvsqxAo.png" alt="设置代理"><br>端口号填写8888，并选中Enable transparent HTTP proxying。<br>Android手机端设置：首选将手机和电脑连接在同一无线局域网上（同一个路由器）。然后利用cmd-ipconfig查看自己电脑的ip：<br><img src="https://i.imgur.com/FPF1EXl.png" alt=""><br>然后在手机wifi连接中进行设置：<br><img src="https://i.imgur.com/KuVrvO7.png" alt=""><br>这里代理设置选择手动，主机名即是电脑的局域网ip，端口号为电脑端Charles设置的端口号。</p><h4 id="抓取http数据"><a href="#抓取http数据" class="headerlink" title="抓取http数据"></a>抓取http数据</h4><p>安卓上面的步骤就设置完成了。我们使用小米商城app来试一下抓取的数据包。<br>手机端打开小米商城：<br><img src="https://i.imgur.com/FY8MGKV.png" alt=""><br>同时监测电脑端Charles的数据抓取：<br><img src="https://i.imgur.com/iZuT861.png" alt=""><br>需要自己筛选一下，可以看到红框中就是小米商城http请求的域名，点开可以看到详细的网络请求接口：<br><img src="https://i.imgur.com/4UkPZp0.png" alt=""><br>点击选中对应的接口，在右侧可以看到抓包的结果，选中Contents可以看到抓取的内容，上部分为请求的数据包，有Headers、Cookie、请求体的Text/Hex/Form形式。下部分为响应的数据包。包括有Headers、响应结果Json、JsonText等形式。<br><img src="https://i.imgur.com/b55ZY50.png" alt=""></p><h4 id="抓取https数据包"><a href="#抓取https数据包" class="headerlink" title="抓取https数据包"></a>抓取https数据包</h4><p>上面的方式只能抓取到http数据包，要抓https还需要安装证书。<br>首先安装电脑端的CA证书：Help —&gt; SSL Proxyging —&gt; Install Charles Root Certificate：<br><img src="https://i.imgur.com/SWq1r42.png" alt=""><br>安装证书：<br><img src="https://i.imgur.com/eJQKMRJ.png" alt=""><br>下一步：<br><img src="https://i.imgur.com/Wfok0Ce.png" alt=""><br>将所有证书都放入下列储存 —&gt; 浏览 —&gt; 受信任的根证书颁发机构 —&gt; 确定 —&gt; 下一步：<br><img src="https://i.imgur.com/T0brCzV.png" alt=""><br>最后点击完成。</p><p>安卓手机端安卓证书：很多手机通过浏览器下载证书安装会提示无法安装，所以这里通过在电脑上下载好手机端的证书，传到手机上再来安装。</p><p>在浏览器中地址中输入chsl.pro/ssl，下载手机端证书并传到手机储存上：<br><img src="https://i.imgur.com/Fbym9NC.png" alt=""><br>在手机设置里面找到系统安全/安全与隐私（小米5手机：设置 —&gt; 更多设置 —&gt; 系统安全）<br><img src="https://i.imgur.com/00PGG3a.png" alt=""><br>找到之前存放证书的位置，选择证书文件：<br><img src="https://i.imgur.com/8crhley.png" alt=""><br>输入证书名称charles，点击确定，安装完成。</p><p>通过小米商城lite的微信小程序来测试下抓取https数据包。打开微信小程序“小米商城Lite”，点击页面跳转。并监测Charles抓取的数据：<br><img src="https://i.imgur.com/TMatYxg.png" alt=""><br>可以看到这就抓取到了小米商城Lite小程序的https请求数据包。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/12/20/%E4%BD%BF%E7%94%A8Charles%E6%8A%93%E5%8F%96app%E6%95%B0%E6%8D%AE%E5%8C%85/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java集合框架 —— HashSet、LinkedHashSet源码分析</title>
      <link>http://yoursite.com/2017/09/21/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-HashSet%E3%80%81LinkedHashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <guid>http://yoursite.com/2017/09/21/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-HashSet%E3%80%81LinkedHashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <pubDate>Thu, 21 Sep 2017 08:06:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&lt;code&gt;HashSet&lt;/code&gt;实现了&lt;code&gt;Set&lt;/code&gt;接口，它的底层是由&lt;code&gt;HashMap&lt;/code&gt;来支
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><code>HashSet</code>实现了<code>Set</code>接口，它的底层是由<code>HashMap</code>来支持的。<code>HashSet</code>的元素实际上是存储在底层<code>HashMap</code>的<code>key</code>上的。由于<code>HashMap</code>的无序不重复特性，<code>HashSet</code>存储的元素也是无序的，并且元素也不能重复，同时也只允许存储一个<code>null</code>元素。</p><h4 id="HashSet源码分析"><a href="#HashSet源码分析" class="headerlink" title="HashSet源码分析"></a>HashSet源码分析</h4><p>主要属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// HashSet底层map</span><br><span class="line">private transient HashMap&lt;E,Object&gt; map;</span><br><span class="line">// 虚拟对象</span><br><span class="line">private static final Object PRESENT = new Object();</span><br></pre></td></tr></table></figure></p><p><code>HashSet</code>是通过<code>HashMap</code>来保存元素，由于只需要在<code>key</code>中保存，所以采用虚拟对象<code>PRESENT</code>对应<code>map</code>中插入<code>key-value</code>的<code>value</code>值的引用。每次向<code>map</code>中添加元素时，键值对对应的<code>value</code>都是<code>PRESENT</code>。</p><p>构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 默认无参构造</span><br><span class="line">public HashSet() &#123;</span><br><span class="line">    map = new HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">// 根据已有集合元素来构造HashSet</span><br><span class="line">public HashSet(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    map = new HashMap&lt;&gt;(Math.max((int) (c.size()/.75f) + 1, 16));</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line">// 给定初始容量</span><br><span class="line">public HashSet(int initialCapacity) &#123;</span><br><span class="line">    map = new HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line">// 给定初始容量和加载因子</span><br><span class="line">public HashSet(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    map = new HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line">// 这个构造函数外部不能调用，供LinkedHashSet复写</span><br><span class="line">HashSet(int initialCapacity, float loadFactor, boolean dummy) &#123;</span><br><span class="line">    map = new LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数都是初始<code>map</code>，以便加入元素的时候存储。</p><p>重要方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 集合大小</span><br><span class="line">public int size() &#123;</span><br><span class="line">    return map.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 集合是否为空</span><br><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">    return map.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 添加元素</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    return map.put(e, PRESENT)==null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 移除元素</span><br><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    return map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 清空集合</span><br><span class="line">public void clear() &#123;</span><br><span class="line">    map.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 集合中是否有元素o</span><br><span class="line">public boolean contains(Object o) &#123;</span><br><span class="line">    return map.containsKey(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>HashSet</code>的增删改查，同时直接操作<code>map</code>来完成的，代码都非常简单。</p><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p><code>LinkedHashSet</code>继承自<code>HashSet</code>，它的构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public LinkedHashSet() &#123;</span><br><span class="line">    super(16, .75f, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public LinkedHashSet(int initialCapacity) &#123;</span><br><span class="line">    super(initialCapacity, .75f, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public LinkedHashSet(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    super(initialCapacity, loadFactor, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public LinkedHashSet(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    super(Math.max(2*c.size(), 11), .75f, true);</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>LinkedHashSet</code>构造方法调用了父类<code>HashSet</code>的这个构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// LinkedHashSet复写，初始化LinkedHashMap</span><br><span class="line">HashSet(int initialCapacity, float loadFactor, boolean dummy) &#123;</span><br><span class="line">    map = new LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，它的底层是一个<code>LinkedHashMap</code>，元素的所有操作都是由<code>LinkedHashMap</code>来维护。<code>LinkedHashSet</code>与<code>HashSet</code>的区别和<code>LinkedHashMap</code>与<code>HashMap</code>的区别一样，<code>LinkedHashMap</code>和<code>LinkedHashSet</code>是有序的，内部由双向链表来记录顺序，而<code>HashMap</code>和<code>HashSet</code>都是无序的。</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>对于<code>HashSet/LinkedHashSet</code>，只要阅读过<code>HashMap/LinkedHashMap</code>的源码，基本上就能完全了解它的实现原理。<code>HashSet/LinkedHashSet</code>中数据的存入、删除、访问都是都是直接操作内部的<code>HashMap</code>，可以说<code>HashSet/LinkedHashSet</code>是在<code>HashMap/LinkedHashMap</code>的基础上加了一层壳。他们唯一的区别就是<code>HashSet/LinkedHashSet</code>保存的元素时单个的数据或对象，而<code>HashMap/LinkedHashMap</code>保存的元素时键值对。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/21/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-HashSet%E3%80%81LinkedHashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java集合框架 —— LinkedHashMap源码分析</title>
      <link>http://yoursite.com/2017/09/21/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-LinkedHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <guid>http://yoursite.com/2017/09/21/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-LinkedHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <pubDate>Thu, 21 Sep 2017 03:15:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;我们知道&lt;code&gt;HashMap&lt;/code&gt;底层是采用数组+单向线性链表/红黑树来实现的，&lt;code&gt;HashMap&lt;/code&gt;在扩容
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我们知道<code>HashMap</code>底层是采用数组+单向线性链表/红黑树来实现的，<code>HashMap</code>在扩容或者链表与红黑树转换过程时可能会改变元素的位置和顺序。如果需要保存元素存入或访问的先后顺序，那就需要采用<code>LinkedHashMap</code>了。</p><h4 id="LinkedHashMap结构"><a href="#LinkedHashMap结构" class="headerlink" title="LinkedHashMap结构"></a>LinkedHashMap结构</h4><p><code>LinkedHashMap</code>继承自<code>HashMap</code>，它的所有操作和<code>HashMap</code>类似，底层结构也和<code>HashMap</code>一样，只不过为了维护元素的存入/访问顺序，增加了一个双向链表。</p><p><img src="https://i.imgur.com/7q4Qif4.png" alt="LinkedHashMap结构图"></p><p><code>LinkedHashMap</code>由数组、单向线性链表、红黑树、双向线性链表组成。如上图：灰色区域为数组，蓝色节点和蓝色箭头为单向链表的引用关系，绿色节点和绿色箭头为红黑树的引用关系，节点中的数字依次表示元素的存入/访问顺序，由橙色的双向箭头表示双向链表的引用关系。</p><p>注：在JDK1.7及之前<code>HashMap</code>中没有红黑树，<code>LinkedHashMap中</code>也不存在红黑树。另在JDK1.6及之前，HashMap中的链表为单向环形链表，<code>LinkedHashMap中</code>中的单向链表和双向链表都是环形链表。在JDK1.8，<code>LinkedHashMap</code>中可能会存在红黑树，同时单向链表和双向链表都是线性的。本文是基于JDK1.8来分析的。</p><h4 id="LinkedHashMap源码分析"><a href="#LinkedHashMap源码分析" class="headerlink" title="LinkedHashMap源码分析"></a>LinkedHashMap源码分析</h4><p>基本属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; head;// 双向链表头节点</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; tail;// 双向链表尾节点</span><br><span class="line">final boolean accessOrder;// 是否按照访问顺序排序</span><br></pre></td></tr></table></figure></p><p>head和tail分别记录了双向链表的头节点和尾节点，遍历时通过<code>head</code>或<code>tail</code>就可以按照存入/访问的顺序来取数据。</p><p><code>accessOrder</code>用以表示<code>LinkedHashMap</code>是否按照访问顺序来排序，为<code>true</code>的话表示按照访问顺序排序，为<code>false</code>表示按照存入顺序排序，默认为<code>false</code>。</p><p>构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 无参构造</span><br><span class="line">public LinkedHashMap() &#123;</span><br><span class="line">    super();</span><br><span class="line">    accessOrder = false;</span><br><span class="line">&#125;</span><br><span class="line">// 给定初始容量</span><br><span class="line">public LinkedHashMap(int initialCapacity) &#123;</span><br><span class="line">    super(initialCapacity);</span><br><span class="line">    accessOrder = false;</span><br><span class="line">&#125;</span><br><span class="line">// 给定初始容量和加载因子</span><br><span class="line">public LinkedHashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    super(initialCapacity, loadFactor);</span><br><span class="line">    accessOrder = false;</span><br><span class="line">&#125;</span><br><span class="line">// 给定初始容量、加载因子、是否按访问先后排序</span><br><span class="line">public LinkedHashMap(int initialCapacity,</span><br><span class="line">                     float loadFactor,</span><br><span class="line">                     boolean accessOrder) &#123;</span><br><span class="line">    super(initialCapacity, loadFactor);</span><br><span class="line">    this.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数都是调用父类<code>HashMap</code>的构造函数。前3个都默认<code>accessOrder</code>为<code>false</code>，<code>LinkedHashMap</code>内部按照存入顺序排序。最后一个构造函数可以指定<code>accessOrder</code>的值。</p><p>增：</p><p><code>LinkedHashMap</code>添加数据要调用了父类的<code>HashMap</code>的<code>put</code>方法，在<code>HashMap</code>的源码中，<code>put</code>方法存入元素后，调用了<code>afterNodeAccess</code>和<code>afterNodeInsertion</code>方法，这两个方法在<code>HashMap</code>中都是空方法，<code>LinkedHashMap</code>实现了这两个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeAccess(Node&lt;K,V&gt; e) &#123; </span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">// 如果按照访问顺序排序，并且添加的元素e不是双向链表的尾节点</span><br><span class="line">    if (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = null;</span><br><span class="line">        if (b == null)</span><br><span class="line">            head = a;</span><br><span class="line">        else</span><br><span class="line">            b.after = a;</span><br><span class="line">        if (a != null)</span><br><span class="line">            a.before = b;</span><br><span class="line">        else</span><br><span class="line">            last = b;</span><br><span class="line">        if (last == null)</span><br><span class="line">            head = p;</span><br><span class="line">        else &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>afterNodeAccess</code>方法的逻辑就是将当前节点<code>e</code>移动到双向链表的尾部。每次<code>LinkedHashMap</code>中有元素被访问时，就会按照访问先后来排序，先访问的在双向链表中靠前，越后访问的越接近尾部。当然只有当<code>accessOrder</code>为<code>true</code>时，才会执行这个操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeInsertion(boolean evict) &#123; // possibly remove eldest</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    if (evict &amp;&amp; (first = head) != null &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        K key = first.key;</span><br><span class="line">        removeNode(hash(key), key, null, false, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>afterNodeInsertion</code>方法意思是<code>evict</code>为<code>true</code>时删除双向链表的头节点。</p><p>通过<code>afterNodeAccess</code>和<code>afterNodeInsertion</code>这两个方法，如果当<code>LinkedHashMap</code>的容量达到一定量时，需要保存它的<code>size</code>不变，那么每次添加一个元素到双向链表的尾部，就要删除一个双向链表头部的元素，这相当于实现了<code>LruCache</code>的策略。</p><p>删：</p><p>删除元素同样也是调用了<code>HashMap</code>的<code>remove</code>方法，在<code>remove</code>方法中，调用了<code>afterNodeRemoval</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeRemoval(Node&lt;K,V&gt; e) &#123; // unlink</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">        (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">    p.before = p.after = null;</span><br><span class="line">    if (b == null)</span><br><span class="line">        head = a;</span><br><span class="line">    else</span><br><span class="line">        b.after = a;</span><br><span class="line">    if (a == null)</span><br><span class="line">        tail = b;</span><br><span class="line">    else</span><br><span class="line">        a.before = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>afterNodeRemoval</code>方法就是将<code>e</code>节点从双向链表中删除，更改<code>e</code>前后节点引用关系，使之重新连成完整的双向链表。</p><p>改：</p><p><code>LinkedHashMap</code>更改元素的<code>value</code>值，仍是调用<code>put</code>方法，涉及到的逻辑可以看上面的<code>afterNodeAccess</code>和<code>afterNodeInsertion</code>这两个方法。</p><p>查：</p><p><code>LinkedHashMap</code>自己实现了<code>get</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    if ((e = getNode(hash(key), key)) == null)</span><br><span class="line">        return null;</span><br><span class="line">    if (accessOrder)</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">    return e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>逻辑非常简单，直接调用<code>HashMap</code>的<code>getNode</code>方法，如果需要按照访问先后排序，调用<code>afterNodeAccess</code>更新双向链表排序。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>LinkedHashMap</code>继承了<code>HashMap</code>的所有特性，唯一的区别就是<code>LinkedHashMap</code>是一个有序的映射集合，而<code>HashMap</code>则是无序的。<code>LinkedHashMap</code>实现排序的原理就是再内部增加了一个双向链表来记录元素的存入/访问顺序。<code>LinkedHashMap</code>内部是记录的是存入还是访问顺序取决于关键属性<code>accessOrder</code>，默认是按存入顺序记录。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/21/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-LinkedHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java集合框架 —— HashMap源码分析</title>
      <link>http://yoursite.com/2017/09/18/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <guid>http://yoursite.com/2017/09/18/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <pubDate>Mon, 18 Sep 2017 10:11:14 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;是基于&lt;code&gt;Map&lt;/code&gt;的键值对映射表，底层是通过数组、链表、红黑树（JDK1.8加入
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><code>HashMap</code>是基于<code>Map</code>的键值对映射表，底层是通过数组、链表、红黑树（JDK1.8加入）来实现的。</p><h4 id="HashMap结构"><a href="#HashMap结构" class="headerlink" title="HashMap结构"></a>HashMap结构</h4><p><code>HashMap</code>中存储元素，是将<code>key</code>和<code>value</code>封装成了一个<code>Node</code>，先以一个<code>Node</code>数组的来存储，通过<code>key</code>的<code>hashCode</code>来计算<code>hash</code>值，根据<code>hash</code>值和<code>HashMap</code>的大小确定存入元素在数组中的位置。当<code>hashCode</code>相同时，即产生了相同的数组索引位置，那么就会通过单向链表的形式来继续存储。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    final int hash;</span><br><span class="line">    final K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        this.hash = hash;</span><br><span class="line">        this.key = key;</span><br><span class="line">        this.value = value;</span><br><span class="line">        this.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">// 省略部分代码...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>HashMap</code>中所有的映射都保存在节点<code>Node</code>中，同时为了解决发生<code>hash</code>碰撞的冲突，节点可以持有下一个节点的引用，以形成一个单向链表。</p><p><img src="https://i.imgur.com/ufoYPo0.png" alt="HashMap结构图（JDK1.7及之前）"></p><p>在JDK1.8，<code>HashMap</code>又做了一些改动，当数组<code>table</code>某个索引位置的上链表的长度大于8的话，则会将链表转化为红黑树。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  // red-black tree links</span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion</span><br><span class="line">    boolean red;</span><br><span class="line"></span><br><span class="line">    TreeNode(int hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        super(hash, key, val, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">// 省略部分代码...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样地，映射的key-value就保存在<code>TreeNode</code>中。<code>parent</code>、<code>left</code>、<code>right</code>持有相应节点的引用形成红黑树。</p><p><img src="https://i.imgur.com/dWu8QEO.png" alt="HashMap结构图（JDK1.8）"></p><h4 id="HashMap源码分析"><a href="#HashMap源码分析" class="headerlink" title="HashMap源码分析"></a>HashMap源码分析</h4><p>主要属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transient Node&lt;K,V&gt;[] table; // 数组</span><br><span class="line">transient int size;  // 大小</span><br><span class="line">int threshold // 扩容阈值</span><br><span class="line">final float loadFactor;  // 加载因子，默认值为0.75</span><br></pre></td></tr></table></figure></p><p>构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 使用默认的初始容量和加载因子</span><br><span class="line">public HashMap() &#123;</span><br><span class="line">    this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指定初始容量，使用默认的加载因子</span><br><span class="line">public HashMap(int initialCapacity) &#123;</span><br><span class="line">    this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用现有的Map来构造一个新的HashMap</span><br><span class="line">public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class="line">    this.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据自定义的初始容量和加载因子来构造HashMap</span><br><span class="line">public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    if (initialCapacity &lt; 0)</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    if (initialCapacity &gt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    &#125; else if (initialCapacity &lt; DEFAULT_INITIAL_CAPACITY) &#123;</span><br><span class="line">        initialCapacity = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    threshold = initialCapacity;</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数主要是设置<code>HashMap</code>的初始容量，以及扩容的加载因子。<code>HashMap(Map&lt;? extends K, ? extends V&gt; m)</code>构造函数根据已有的映射来构造新的<code>HashMap</code>，它同样采用的默认的加载因子，并将<code>m</code>中的元素添加到新构造的<code>HashMap</code>中。</p><p>数据存放：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public void putAll(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class="line">    putMapEntries(m, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final void putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict) &#123;</span><br><span class="line">    int s = m.size();</span><br><span class="line">    if (s &gt; 0) &#123;</span><br><span class="line">        if (table == null) &#123; // pre-size</span><br><span class="line">            float ft = ((float)s / loadFactor) + 1.0F;</span><br><span class="line">            int t = ((ft &lt; (float)MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (int)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            if (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        for (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, false, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>putAll</code>方法直接调用<code>putMapEntries</code>。<code>putMapEntries</code>方法中先根据已有的<code>Map</code>中的元素数量对新构造的<code>HashMap</code>进行扩容，然后遍历旧的<code>Map</code>，取出元素存放到新的<code>HashMap</code>中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">// 存放key-value</span><br><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据key的hashCode来计算hash值</span><br><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">               boolean evict) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">// table为null的话，进行初始化</span><br><span class="line">    if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">// 根据（n-1）&amp;hash来计算出元素在数组中的位置i</span><br><span class="line">    if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">// 如果数组中该位置没有元素，即tab[i]==null,则直接构建Node存放在该位置</span><br><span class="line">        tab[i] = newNode(hash, key, value, null);</span><br><span class="line">    else &#123; // tab[i]不为null</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">// 如果数组中已有的节点tab[i]与需要新存入的元素的key相同，则直接替换掉tab[i]</span><br><span class="line">        if (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        else if (p instanceof TreeNode)</span><br><span class="line">// 如果tab[i]为红黑树节点，则直接存入红黑树</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">        else &#123;</span><br><span class="line">// tab[i]为链表的第一个节点，遍历链表，将新的节点加入到链表的末尾</span><br><span class="line">            for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                if ((e = p.next) == null) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, null);</span><br><span class="line">// 如果链表的长度大于阈值，则将链表转换为红黑树</span><br><span class="line">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">// 如果链表中存在与新加入的元素key相同，则直接替换掉</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    break;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (e != null) &#123; // existing mapping for key</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">// 添加完成后，检查是否需要扩容</span><br><span class="line">    if (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>put</code>方法的主要逻辑：根据添加节点的<code>hash</code>值计算计算它在数组中的位置<code>i</code>，判断<code>tab[i]</code>是否为空，为空则直接加入；不为空的话，需要判断该节点的<code>key</code>是否与新加入的节点的<code>key</code>相同，相同的话直接替换；如果不同则需要判断<code>tab[i]</code>节点是否是红黑树节点，如果是红黑树节点，则直接加入到红黑树中；如果不是红黑树节点，那肯定就是链表的第一个节点了，遍历链表，在遍历的过程中还需要判断是否与链表中已有节点的<code>key</code>相同，如果相同，同样直接替换掉，都不同的话就直接添加到链表的末尾。并且呢，加入链表后还需要判断链表的长度是否超过了阈值8，超过了的话，需要将链表转换为红黑树。</p><p><code>HashMap</code>在添加数据的时候，会判断当前数据量是否超过设定的阈值，如果超过的话会进行扩容，在扩容过程中会将已添加的数据进行重新添加，以致原来添加元素的顺序和位置都改变了，所以<code>HashMap</code>不能保证元素的存入取出顺序。</p><p>删除数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">// 根据key删除数据</span><br><span class="line">public V remove(Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    return (e = removeNode(hash(key), key, null, false, true)) == null ?</span><br><span class="line">        null : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据key-value删除数据</span><br><span class="line">@Override</span><br><span class="line">public boolean remove(Object key, Object value) &#123;</span><br><span class="line">    return removeNode(hash(key), key, value, true, true) != null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除节点</span><br><span class="line">final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value,</span><br><span class="line">                           boolean matchValue, boolean movable) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;</span><br><span class="line">// 根据hash值得到数组索引位置的节点p</span><br><span class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = null, e; K k; V v;</span><br><span class="line">// p节点的key与需要删除的节点的key相同的话，则说明p就是需要删除的节点</span><br><span class="line">        if (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;// 赋值给node</span><br><span class="line">        else if ((e = p.next) != null) &#123;</span><br><span class="line">            if (p instanceof TreeNode)</span><br><span class="line">// p节点为红黑树节点，从红黑树中获取匹配的删除节点</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            else &#123;</span><br><span class="line">// p节点为链表的第一个节点，遍历链表，找到匹配的删除节点</span><br><span class="line">                do &#123;</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != null &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; while ((e = e.next) != null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">// 匹配的删除节点node不为null的话，删除node</span><br><span class="line">        if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != null &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            if (node instanceof TreeNode)</span><br><span class="line">// 从红黑树中删除</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);</span><br><span class="line">            else if (node == p)</span><br><span class="line">// 从数组中删除</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            else</span><br><span class="line">// 从链表中删除</span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>remove</code>的逻辑和加入元素的逻辑相似，依次从数组、红黑树、链表中找到匹配的删除节点来删除。</p><p><code>clear</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void clear() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    modCount++;</span><br><span class="line">    if ((tab = table) != null &amp;&amp; size &gt; 0) &#123;</span><br><span class="line">        size = 0;</span><br><span class="line">        for (int i = 0; i &lt; tab.length; ++i)</span><br><span class="line">            tab[i] = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>clear</code>方法要简单些，直接遍历数组tab，将数组中所有元素都置空即可。</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>对于<code>HashMap</code>，我们只要知道了它的底层结构，要理解它的实现原理还是非常简单。在JDK1.8之后，加入了红黑树的结构，使<code>HashMap</code>的效率比之前的版本又优化了很多，关于链表转化为红黑树，以及红黑树转链表的具体实现等细节后续再做分析。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/18/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java集合框架 —— LinkedList源码分析</title>
      <link>http://yoursite.com/2017/09/14/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <guid>http://yoursite.com/2017/09/14/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <pubDate>Thu, 14 Sep 2017 09:28:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;在JDK1.7之前，&lt;code&gt;LinkedList&lt;/code&gt;是采用双向环形链表来实现的，在1.7及之后，Oracle将&lt;code&gt;LinkedList&lt;/code&gt;做了优化，将环形链表改成了线性链表。本文对于&lt;code&gt;LinkedList&lt;/code&gt;的源码分析基于
        
      
      </description>
      
      <content:encoded><![CDATA[<p>在JDK1.7之前，<code>LinkedList</code>是采用双向环形链表来实现的，在1.7及之后，Oracle将<code>LinkedList</code>做了优化，将环形链表改成了线性链表。本文对于<code>LinkedList</code>的源码分析基于JDK1.8。</p><p><code>LinkedList</code>既然是通过一个双向线性链表来实现，那么肯定就能够很轻易的找到链表的第一个节点和最后一个节点，在源码中可以看到有这两个字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transient Node&lt;E&gt; first; // 链表第一个节点</span><br><span class="line">transient Node&lt;E&gt; last;  // 链表最后一个节点</span><br></pre></td></tr></table></figure></p><p>先来看一下什么是节点<code>Node</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private static class Node&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        this.item = element;</span><br><span class="line">        this.next = next;</span><br><span class="line">        this.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>节点<code>Node</code>中有三个成员：</p><ul><li>item ： 存储的元素</li><li>next ： 下一个节点</li><li>prev ： 上一个节点</li></ul><p>节点中保存有需要存储的元素，同时持有上一个节点和下一个节点的引用，各个节点依次持有前后节点的引用就形成了一个链，这样，当我们需要查找链中某一个节点保存的元素时，只需要通过第一个节点或者最后一个节点依次查找，就可以找到我们需要的节点。</p><p>需要注意的是，在JDK1.7及之后，第一个节点<code>first</code>的前一个节点<code>prev</code>为<code>null</code>，最后一个节点<code>last</code>的后一个节点<code>next</code>也为<code>null</code>。而在JDK1.6及之前，头节点<code>header</code>是一个不保存元素的节点，<code>header</code>的下一个节点<code>next</code>是第一个元素节点，而<code>header</code>的上一个节点是最后一个元素节点，这样使得它形成一个环形的双向链表。</p><p><img src="https://i.imgur.com/SuHIva6.png" alt="LinkedList节点结构图1（JDK1.7及以后）"><br><img src="https://i.imgur.com/QAwP1zC.png" alt="LinkedList节点结构图2（JDK1.6及以前）"></p><p><code>LinkedList</code>的构造函数有两个，一个无参，另一个可以传入一个集合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public LinkedList() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public LinkedList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    this();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看下<code>addAll</code>方法的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    return addAll(size, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">// 检查是否越界</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">// 将集合c转化为数组a</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    int numNew = a.length;</span><br><span class="line">    if (numNew == 0)</span><br><span class="line">        return false;</span><br><span class="line">// pred为插入元素位置点前一个节点，succ为插入元素位置的后一个节点</span><br><span class="line">    Node&lt;E&gt; pred, succ;     </span><br><span class="line">    if (index == size) &#123;// index==size的话，在链表的末尾添加元素</span><br><span class="line">        succ = null;</span><br><span class="line">        pred = last;</span><br><span class="line">    &#125; else &#123;// 否则的话，从链表中间加入</span><br><span class="line">        succ = node(index);</span><br><span class="line">        pred = succ.prev;</span><br><span class="line">    &#125;</span><br><span class="line">// 遍历需要加入的元素数组a</span><br><span class="line">    for (Object o : a) &#123;   </span><br><span class="line">// 通过元素o构造一个节点Node</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;) E e = (E) o;</span><br><span class="line">        Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null);</span><br><span class="line">        if (pred == null) // 插入位置的前一个节点为null，说明需要插入的是first节点</span><br><span class="line">            first = newNode;</span><br><span class="line">        else    // 插入位置的前一个节点不为null，即从链表中或链表末尾插入</span><br><span class="line">// 将要插入的节点复制给插入位置的上一个节点的next</span><br><span class="line">            pred.next = newNode;</span><br><span class="line">// 将newNode赋值给下个需要插入的节点的pred</span><br><span class="line">        pred = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (succ == null) &#123; // succ为null，说明是从末尾添加的元素，将添加的最后一个元素赋值给last</span><br><span class="line">        last = pred;</span><br><span class="line">    &#125; else &#123;// 从链表中某个位置添加的，重新连接上添加元素时断开的引用链</span><br><span class="line">        pred.next = succ;</span><br><span class="line">        succ.prev = pred;</span><br><span class="line">    &#125;</span><br><span class="line">// 更新链表的大小</span><br><span class="line">    size += numNew;</span><br><span class="line">    modCount++;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在构造方法中调用<code>addAll</code>方法，相当于是向一个空链表中添加集合<code>c</code>中的元素。</p><p>如果是在已有元素的链表中调用<code>addAll</code>方法来添加元素的话，就需要判断指定的添加位置<code>index</code>是否越界，如果越界会抛出异常；如果没有越界，根据添加的位置<code>index</code>，断开链表中<code>index</code>位置的节点前后的引用，加入新元素，重新连上断开位置的前后节点的引用。过程如下图：</p><p><img src="https://i.imgur.com/tTw37wG.png" alt="LinkedList加入元素1"><br><img src="https://i.imgur.com/h1JzRfl.png" alt="LinkedList加入元素2"></p><p><code>add</code>方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接就调用了<code>linkLast</code>方法，说明默认的<code>add</code>方法是直接将元素添加到已有的链表的末尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void linkLast(E e) &#123;</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class="line">    last = newNode;</span><br><span class="line">    if (l == null)</span><br><span class="line">        first = newNode;</span><br><span class="line">    else</span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新加入元素的节点赋值给<code>last</code>节点，然后判断了一下加入之前的<code>last</code>节点是否为空，为空的话，说明链表中没有元素，新加入的就是链表的<code>first</code>节点；不为空直接将之前的最后一个节点的<code>next</code>引用添加的节点即可。</p><p>还有一个add方法，指定了添加位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    if (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    else</span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里需要先判断是否越界，再看添加的位置是否在已有链表的末尾，如果在末尾就直接添加到末尾，不在末尾的话，调用linkBefore添加到index位置的节点之前。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">    // assert succ != null;</span><br><span class="line">    final Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    if (pred == null)</span><br><span class="line">        first = newNode;</span><br><span class="line">    else</span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>pred</code>为<code>null</code>的话，说明<code>succ</code>是添加元素前链表的<code>first</code>节点，加入元素<code>e</code>，更新<code>first</code>节点，并更改引用链。</p><p><code>addFirst</code>和<code>addLast</code>方法中分别调用了<code>linkFirst</code>方法和<code>linkLast</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private void linkFirst(E e) &#123;</span><br><span class="line">    final Node&lt;E&gt; f = first;</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    if (f == null)</span><br><span class="line">        last = newNode;</span><br><span class="line">    else</span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void linkLast(E e) &#123;</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class="line">    last = newNode;</span><br><span class="line">    if (l == null)</span><br><span class="line">        first = newNode;</span><br><span class="line">    else</span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>linkFirst/linkLast</code>方法即是将新节点添加到链表的头部或者尾部，更新链表的<code>prev</code>和<code>next</code>引用。</p><p><code>remove</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class="line">            if (x.item == null) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class="line">            if (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不管需要移除的元素<code>O</code>是否为空，都是遍历后调用<code>unlink</code>方法来删除节点，继续看<code>unlink</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">    // assert x != null;</span><br><span class="line">    final E element = x.item;</span><br><span class="line">    final Node&lt;E&gt; next = x.next;</span><br><span class="line">    final Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    if (prev == null) &#123;</span><br><span class="line">// 如果prev为null的话，那么删除的是first节点，将next指定为删除后的first节点</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">// prev不为null，将prev的next引用指向next，并解除x元素对prev的引用</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (next == null) &#123;</span><br><span class="line">// 如果next为null，那么删除的是last节点，将prev指定为删除后的last节点</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">// next不为null，将next的prev引用指向prev，并解除x的next引用</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = null;</span><br><span class="line">    &#125;</span><br><span class="line">// 置空x节点中的元素</span><br><span class="line">    x.item = null;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>removeFirst</code>和<code>removeLast</code>方法同样是直接调用了<code>unlinkFirst</code>和<code>unlinkLast</code>，实现和<code>unlink</code>差不多，不做过多解释。</p><p><code>set</code>方法，<code>set</code>方法即修改链表中指定位置的元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public E set(int index, E element) &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    Node&lt;E&gt; x = node(index);</span><br><span class="line">    E oldVal = x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    return oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>找到指定位置的节点<code>x</code>，更改该节点的<code>item</code>属性就行了。</p><p>看下获取节点的<code>node</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;E&gt; node(int index) &#123;</span><br><span class="line">    // assert isElementIndex(index);</span><br><span class="line"></span><br><span class="line">    if (index &lt; (size &gt;&gt; 1)) &#123; // 靠近头部</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        for (int i = 0; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;// 靠近尾部</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        for (int i = size - 1; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>判断位置<code>index</code>是靠近头部还是尾部，靠近头部，则从<code>first</code>节点往后遍历，靠近尾部则从<code>last</code>节点往前遍历，这种方式可以使得链表查找的时候遍历次数不会超过链表长度的一半，从而提升查找效率。</p><p><code>get</code>、<code>getFirst</code>、<code>getLast</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public E get(int index) &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    return node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public E getFirst() &#123;</span><br><span class="line">    final Node&lt;E&gt; f = first;</span><br><span class="line">    if (f == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return f.item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public E getLast() &#123;</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    if (l == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return l.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>getFirst</code>和<code>getLast</code>直接后去<code>first</code>和<code>last</code>节点中的元素值，<code>get</code>方法则直接调用了<code>node</code>方法，不再解释。</p><p><code>LinkedList</code>源码中的其他方法不再分析了，实现都很容易理解。从<code>LinkedList</code>的增、删、改、查等方法的实现逻辑可以看出来，<code>LinkedList</code>的增和删效率相对于改和查要高，因为每次修改和查询都要从链表的头节点或尾节点开始遍历，而增加和删除，只需要在制定位置断开节点引用，添加和删除元素后，重新连上引用链即可。所以，<code>LinkedList</code>适合用在添加和删除比较频繁，而修改和查询较少的情况下。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/14/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E2%80%94%E2%80%94-LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
